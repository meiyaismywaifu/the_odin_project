"Implement a method #substrings that takes a word as the first argument and then an array of valid substrings (your dictionary) as the second argument. It should return a hash listing each substring (case insensitive) that was found in the original string and how many times it was found.
   > dictionary = ["below","down","go","going","horn","how","howdy","it","i","low","own","part","partner","sit"]
   => ["below","down","go","going","horn","how","howdy","it","i","low","own","part","partner","sit"]
   > substrings("below", dictionary)
   => { "below" => 1, "low" => 1 }
Next, make sure your method can handle multiple words:
   > substrings("Howdy partner, sit down! How's it going?", dictionary)
   => { "down" => 1, "go" => 1, "going" => 1, "how" => 2, "howdy" => 1, "it" => 2, "i" => 3, "own" => 1, "part" => 1, "partner" => 1, "sit" => 1 }
Please note the order of your keys might be different.
Quick Tips:
Recall how to turn strings into arrays and arrays into strings."

--- --- ---

def substrings(string, dictionary)
   hash empty
   array = string replace all non-alphabet with spaces, then separate by spaces

   array.each do |input_word|
      dictionary.each do |dictionary_word|
         if dictionary_word.include? input_word
            hash entry for input_word: input_word, integer+=1
            (ruby doesnt have ++)
         end
      end
   end
   puts hash
end

@dictionary = [some word set]
puts operation briefing
loop do
   prompt: request string to check against dictionary
   substrings(user input, @dictionary)
   puts separator
end
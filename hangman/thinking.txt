	1. Download the 5desk.txt dictionary file from http://scrapmaker.com/.
	
	2. When a new game is started, your script should load in the dictionary and randomly select a word between 5 and 12 characters long for the secret word.
	
	3. You don’t need to draw an actual stick figure (though you can if you want to!), but do display some sort of count so the player knows how many more incorrect guesses he/she has before the game ends. You should also display which correct letters have already been chosen (and their position in the word, e.g. _ r o g r a _ _ i n g) and which incorrect letters have already been chosen.
	
	4. Every turn, allow the player to make a guess of a letter. It should be case insensitive. Update the display to reflect whether the letter was correct or incorrect. If out of guesses, the player should lose.
	
	5. Now implement the functionality where, at the start of any turn, instead of making a guess the player should also have the option to save the game. Remember what you learned about serializing objects… you can serialize your game class too!
	
	6. When the program first loads, add in an option that allows you to open one of your saved games, which should jump you exactly back to where you were when you saved. Play on!
	
--- --- ---

6 guesses? let's say 7.
methods are delimited by input and output types? that was the idea from last time.
seem to like input validators a lot, maybe they should be a module so we can use it inbetween programs (there isn't a reason to have a module so far otherwise). the previous instruction said use "coercion over question" also known as "duck typing" ('if it looks like a duck'), the theory is ok but the practice seems dubious, esp. where you need to add in a rescue anyways, what's the point? just write an error as an else. anyways seems like preference atm, but something to think about.

hangman itself seems trivial... let's figure out how IO works. i suppose that is the subject here.
first of all why can a file in /lib read from its parent folder...

what should the save file be? CSV? i suppose it's better than number position in a string.
do we need ERB? what could ERB do? well i suppose the problem is what does a save look like.
min: true answer, current hits, record of misses, how many guesses left. "comma separated values"... ideally a "value" can be something like a hash too. oh right that's what that JSON stuff is for.
would be nice to have an ongoing tally of win/loss and stuff too. but should do minimum product first. don't get lost again doing validation and stuff first.